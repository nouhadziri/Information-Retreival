#!/usr/bin/python

import sys
from sqlite3 import DatabaseError, OperationalError

from clusterer.kmeans import KMeansClusterer
from util.fancy import *

if len(sys.argv) < 3:
    print '%s[ERROR] Not enough arguments%s' % (RED, NC)
else:
    input_index = sys.argv[1]

    try:
        k = int(sys.argv[2])
    except ValueError:
        k = 0
        print "%s[ERROR] K must be a number %s" % (RED, NC)
        exit(1)

    if len(sys.argv) > 3:
        seeds = sys.argv[3:]
        if len(seeds) != k:
            print "%s[ERROR] Number of provided seeds does not match with K %s" % (RED, NC)
            exit(1)

        try:
            seeds = [int(doc_id) for doc_id in seeds]
        except ValueError:
            print "%s[ERROR] document id must be an integer%s" % (RED, NC)
            exit(1)
    else:
        seeds = []

    try:
        result = KMeansClusterer(input_index, k, seeds).cluster()

        for cluster in result:
            print("%s\t%s" % (cluster, ",".join([str(doc_id) for doc_id in result[cluster]])))

    except OperationalError:
        print "%s[ERROR] Tables in input database file doesn't match with supported schema of the inverted index%s" % (RED, NC)
    except DatabaseError:
        print "%s[ERROR] Input file is not recognized as a SQLite database file%s" % (RED, NC)
    except:
        print "%s[ERROR] %s%s" % (RED, sys.exc_info()[1], NC)
